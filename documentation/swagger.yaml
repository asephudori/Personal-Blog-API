openapi: 3.0.0
info:
  version: 1.0.0
  title: Personal Blog API
  description: API for Personal Blog
paths:
  /register:
    post:
      tags:
        - Auth
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - email
                - password
              properties:
                name:
                  type: string
                  example: John Doe
                email:
                  type: string
                  example: johndoe@example.com
                password:
                  type: string
                  example: password123
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Register successfully
                  data:
                    type: object
                    properties:
                      user:
                        type: object
                        properties:
                          name:
                            type: string
                            example: John Doe
                          email:
                            type: string
                            example: johndoe@example.com
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: Bad request
                  error:
                    type: string
                    example: Account has been registered.
                  data:
                    type: string
                    nullable: true
                    example: null

  /login:
    post:
      tags:
      - Auth
      summary: Login a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  example: johndoe@example.com
                password:
                  type: string
                  example: password123
      responses:
        '200':
          description: User logged in successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Login Successfully
                  data:
                    type: object
                    properties:
                      name:
                        type: string
                        example: John Doe
                      email:
                        type: string
                        example: johndoe@example.com
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: Bad request
                  error:
                    type: string
                    example: Invalid Email or Password

# users
  /users:
    get:
      tags:
        - Users
      summary: Retrieve all users
      responses:
        '200':
          description: Successfully retrieved all users
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "User successfully found"
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
        '404':
          description: No users found
        '500':
          description: Server error
  /users/{id}:
    get:
      tags:
        - Users
      summary: Retrieve a user by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID of the user to retrieve
      responses:
        '200':
          description: Successfully retrieved user
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "User successfully found!"
                  data:
                    $ref: '#/components/schemas/User'
        '404':
          description: User not found
        '500':
          description: Server error

# articles
  /articles:
    post:
      tags:
        - Articles
      summary: Create a new article
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: "New Article"
                content:
                  type: string
                  example: "Article content goes here..."
                createdAt:
                  type: string
                  format: date-time
                  example: "2023-07-19T00:00:00Z"
                authorId:
                  type: integer
                  example: 1
      responses:
        '201':
          description: Article created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Article created successfully"
                  data:
                    $ref: '#/components/schemas/Article'
        '400':
          description: Bad request
        '500':
          description: Server error
    get:
      tags:
        - Articles
      summary: Retrieve all articles without pagination
      responses:
        '200':
          description: Successfully retrieved all articles
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Article successfully found"
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Article'
        '404':
          description: No articles found
        '500':
          description: Server error
  /articles/search:
    get:
      tags:
        - Articles
      summary: Search for articles with pagination
      parameters:
        - in: query
          name: title
          schema:
            type: string
          description: Title to search for
        - in: query
          name: content
          schema:
            type: string
          description: Content to search for
        - in: query
          name: authorName
          schema:
            type: string
          description: Author's name to search for
        - in: query
          name: page
          schema:
            type: integer
          description: Page number for pagination (default is 1)
        - in: query
          name: limit
          schema:
            type: integer
          description: Number of articles per page (default is 8)
      responses:
        '200':
          description: Successfully found articles
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Articles found successfully"
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Article'
                  pagination:
                    type: object
                    properties:
                      totalItems:
                        type: integer
                        example: 100
                      totalPages:
                        type: integer
                        example: 13
                      currentPage:
                        type: integer
                        example: 1
                      pageSize:
                        type: integer
                        example: 8
        '404':
          description: No articles found matching the criteria
        '500':
          description: Server error
  /articles/{id}:
    put:
      tags:
        - Articles
      summary: Update an existing article
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID of the article to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: "Updated Article"
                content:
                  type: string
                  example: "Updated content goes here..."
                updatedAt:
                  type: string
                  format: date-time
                  example: "2023-07-19T00:00:00Z"
                authorId:
                  type: integer
                  example: 1
      responses:
        '201':
          description: Article updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Article is updated!"
                  data:
                    $ref: '#/components/schemas/Article'
        '404':
          description: Article not found
        '500':
          description: Server error
    patch:
      tags:
        - Articles
      summary: Update article publish status
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID of the article to update publish status
      responses:
        '201':
          description: Publish status has been updated!
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Publish status has been updated!"
                  data:
                    $ref: '#/components/schemas/Article'
        '404':
          description: Article not found
        '500':
          description: Server error
    delete:
      tags:
        - Articles
      summary: Delete an article
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID of the article to delete
      responses:
        '201':
          description: Article has been deleted!
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Article has been deleted!"
                  data:
                    $ref: '#/components/schemas/Article'
        '404':
          description: Article not found
        '500':
          description: Server error
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "John Doe"
        email:
          type: string
          example: "john.doe@example.com"
        Articles:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
                example: 101
              title:
                type: string
                example: "Sample Article"

    Article:
      type: object
      properties:
        id:
          type: integer
          example: 1
        title:
          type: string
          example: "Article Title"
        content:
          type: string
          example: "Content of the article"
        createdAt:
          type: string
          format: date-time
          example: "2023-07-19T00:00:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2023-07-19T00:00:00Z"
        authorId:
          type: integer
          example: 1
        published:
          type: boolean
          example: true
